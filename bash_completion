#! /bin/bash
_tfvm() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD - 1]}"
  opts="--version -v ls-remote install use ls"

  case "${prev}" in
  install)
    latest_versions="$(tfvm ls-remote | sort -V | grep -Ev ".*-beta.*|.*-alpha.*|.*-rc.*" | tail -3)"
    local running="${latest_versions:-""}"
    COMPREPLY=("$(compgen -W "${running}" -- "${cur}")")
    return 0
    ;;
  use)
    latest_versions=$(tfvm ls | grep -Eo '^[0-9\.]*')
    local running="${latest_versions:-""} latest"
    COMPREPLY=("$(compgen -W "${running}" -- "${cur}")")
    return 0
    ;;
  *) ;;
  esac

  COMPREPLY=("$(compgen -W "${opts}" -- "${cur}")")
  return 0

}

# complete is a bash builtin, but recent versions of ZSH come with a function
# called bashcompinit that will create a complete in ZSH. If the user is in
# ZSH, load and run bashcompinit before calling the complete function.
# copied from https://github.com/nvm-sh/nvm/blob/master/bash_completion#L86
if [[ -n ${ZSH_VERSION-} ]]; then
  autoload -U +X bashcompinit && bashcompinit
  autoload -U +X compinit && if [[ ${ZSH_DISABLE_COMPFIX-} == true ]]; then
    compinit -u
  else
    compinit
  fi
fi

complete -F _tfvm tfvm
